getSubTypeName(subType)
setmetatable(className, methodsTable)
getSubTypeName(subType)
isType(derived, base)
rawgetmetatable(metatableName)
Variant(number or string or position or thing)
Variant:getNumber()
Variant:getString()
Variant:getPosition()
Position([x = 0[, y = 0[, z = 0[, stackpos = 0]]]])
Position([position])
position:getDistance(positionEx)
position:isSightClear(positionEx[, sameFloor = true])
position:sendMagicEffect(magicEffect[, player = nullptr])
position:sendDistanceEffect(positionEx, distanceEffect[, player = nullptr])
Tile(x, y, z)
Tile(position)
tile:remove()
tile:getPosition()
tile:getGround()
tile:getThing(index)
tile:getThingCount()
tile:getTopVisibleThing(creature)
tile:getTopTopItem()
tile:getTopDownItem()
tile:getFieldItem()
tile:getItemById(itemId[, subType = -1])
tile:getItemByType(itemType)
tile:getItemByTopOrder(topOrder)
tile:getItemCountById(itemId[, subType = -1])
tile:getBottomCreature()
tile:getTopCreature()
tile:getBottomVisibleCreature(creature)
tile:getTopVisibleCreature(creature)
tile:getItems()
tile:getItemCount()
tile:getDownItemCount()
tile:getTopItemCount()
tile:getCreatures()
tile:getCreatureCount()
tile:hasProperty(property[, item])
tile:getThingIndex(thing)
tile:hasFlag(flag)
tile:queryAdd(thing[, flags])
tile:addItem(itemId[, count/subType = 1[, flags = 0]])
tile:addItemEx(item[, flags = 0])
tile:getHouse()
NetworkMessage()
networkMessage:getByte()
networkMessage:getU16()
networkMessage:getU32()
networkMessage:getU64()
networkMessage:getString()
networkMessage:getPosition()
networkMessage:addByte(number)
networkMessage:addU16(number)
networkMessage:addU32(number)
networkMessage:addU64(number)
networkMessage:addString(string)
networkMessage:addPosition(position)
networkMessage:addDouble(number)
networkMessage:addItem(item)
networkMessage:addItemId(itemId)
networkMessage:reset()
networkMessage:seek(position)
networkMessage:tell()
networkMessage:len()
networkMessage:skipBytes(number)
networkMessage:sendToPlayer(player)
ModalWindow(id, title, message)
modalWindow:getId()
modalWindow:getTitle()
modalWindow:getMessage()
modalWindow:setTitle(text)
modalWindow:setMessage(text)
modalWindow:getButtonCount()
modalWindow:getChoiceCount()
modalWindow:addButton(id, text)
modalWindow:addChoice(id, text)
modalWindow:getDefaultEnterButton()
modalWindow:setDefaultEnterButton(buttonId)
modalWindow:getDefaultEscapeButton()
modalWindow:setDefaultEscapeButton(buttonId)
modalWindow:hasPriority()
modalWindow:setPriority(priority)
modalWindow:sendToPlayer(player)
Item(uid)
item:isItem()
item:getParent()
item:getTopParent()
item:getId()
item:clone()
item:split([count = 1])
item:remove([count = -1])
item:getUniqueId()
item:getActionId()
item:setActionId(actionId)
item:getCount()
item:getCharges()
item:getFluidType()
item:getWeight()
item:getSubType()
item:getName()
item:getPluralName()
item:getArticle()
item:getPosition()
item:getTile()
item:hasAttribute(key)
item:getAttribute(key)
item:setAttribute(key, value)
item:removeAttribute(key)
item:getCustomAttribute(key)
item:setCustomAttribute(key, value)
item:removeCustomAttribute(key)
item:moveTo(position or cylinder[, flags])
item:transform(itemId[, count/subType = -1])
item:decay(decayId)
item:getDescription(distance)
item:getSpecialDescription()
item:hasProperty(property)
item:isLoadedFromMap()
item:setStoreItem(storeItem)
item:isStoreItem()
Container(uid)
container:getSize()
container:getCapacity()
container:getEmptySlots([recursive = false])
container:getItemHoldingCount()
container:getItem(index)
container:hasItem(item)
container:addItem(itemId[, count/subType = 1[, index = INDEX_WHEREEVER[, flags = 0]]])
container:addItemEx(item[, index = INDEX_WHEREEVER[, flags = 0]])
container:getCorpseOwner()
container:getItemCountById(itemId[, subType = -1])
container:getContentDescription()
container:getItems([recursive = false])
Teleport(uid)
teleport:getDestination()
teleport:setDestination(position)
Creature(id or name or userdata)
creature:getEvents(type)
creature:registerEvent(name)
creature:unregisterEvent(name)
creature:isRemoved()
creature:isCreature()
creature:isInGhostMode()
creature:isHealthHidden()
creature:isMovementBlocked()
creature:canSee(position)
creature:canSeeCreature(creature)
creature:canSeeGhostMode(creature)
creature:canSeeInvisibility()
creature:getParent()
creature:getId()
creature:getName()
creature:getTarget()
creature:setTarget(target)
creature:getFollowCreature()
creature:setFollowCreature(followedCreature)
creature:getMaster()
creature:setMaster(master)
creature:getLight()
creature:setLight(color, level)
creature:getSpeed()
creature:getBaseSpeed()
creature:changeSpeed(delta)
creature:setDropLoot(doDrop)
creature:setSkillLoss(skillLoss)
creature:getPosition()
creature:getTile()
creature:getDirection()
creature:setDirection(direction)
creature:getHealth()
creature:setHealth(health)
creature:addHealth(healthChange)
creature:getMaxHealth()
creature:setMaxHealth(maxHealth)
creature:setHiddenHealth(hide)
creature:setMovementBlocked(state)
creature:getSkull()
creature:setSkull(skull)
creature:getOutfit()
creature:setOutfit(outfit)
creature:getCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0]])
creature:addCondition(condition[, force = false])
creature:removeCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0[, force = false]]])
creature:removeCondition(condition[, force = false])
creature:hasCondition(conditionType[, subId = 0])
creature:isImmune(condition or conditionType)
creature:remove()
creature:teleportTo(position[, pushMovement = false])
creature:say(text[, type = TALKTYPE_MONSTER_SAY[, ghost = false[, target = nullptr[, position]]]])
creature:getDamageMap()
creature:getSummons()
creature:getDescription(distance)
creature:getPathTo(pos[, minTargetDist = 0[, maxTargetDist = 1[, fullPathSearch = true[, clearSight = true[, maxSearchDist = 0]]]]])
creature:move(direction)
creature:move(tile[, flags = 0])
creature:getZone()
Player(id or guid or name or userdata)
player:isPlayer()
player:getGuid()
player:getIp()
player:getAccountId()
player:getLastLoginSaved()
player:getLastLogout()
player:getAccountType()
player:setAccountType(accountType)
player:getCapacity()
player:setCapacity(capacity)
player:getFreeCapacity()
player:getDepotChest(depotId[, autoCreate = false])
player:getInbox()
player:getSkullTime()
player:setSkullTime(skullTime)
player:getDeathPenalty()
player:getExperience()
player:addExperience(experience[, sendText = false])
player:removeExperience(experience[, sendText = false])
player:getLevel()
player:getMagicLevel()
player:getBaseMagicLevel()
player:getMana()
player:addMana(manaChange[, animationOnLoss = false])
player:getMaxMana()
player:setMaxMana(maxMana)
player:getManaSpent()
player:addManaSpent(amount)
player:removeManaSpent(amount[, notify = true])
player:getBaseMaxHealth()
player:getBaseMaxMana()
player:getSkillLevel(skillType)
player:getEffectiveSkillLevel(skillType)
player:getSkillPercent(skillType)
player:getSkillTries(skillType)
player:addSkillTries(skillType, tries)
player:removeSkillTries(skillType, tries[, notify = true])
player:getSpecialSkill(specialSkillType)
player:addSpecialSkill(specialSkillType, value)
player:addOfflineTrainingTime(time)
player:getOfflineTrainingTime()
player:removeOfflineTrainingTime(time)
player:addOfflineTrainingTries(skillType, tries)
player:getOfflineTrainingSkill()
player:setOfflineTrainingSkill(skillId)
player:getItemCount(itemId[, subType = -1])
player:getItemById(itemId, deepSearch[, subType = -1])
player:getVocation()
player:setVocation(id or name or userdata)
player:getSex()
player:setSex(newSex)
player:getTown()
player:setTown(town)
player:getGuild()
player:setGuild(guild)
player:getGuildLevel()
player:setGuildLevel(level)
player:getGuildNick()
player:setGuildNick(nick)
player:getGroup()
player:setGroup(group)
player:getStamina()
player:setStamina(stamina)
player:getSoul()
player:addSoul(soulChange)
player:getMaxSoul()
player:getBankBalance()
player:setBankBalance(bankBalance)
player:getStorageValue(key)
player:setStorageValue(key, value)
player:addItem(itemId[, count = 1[, canDropOnMap = true[, subType = 1[, slot = CONST_SLOT_WHEREEVER]]]])
player:addItemEx(item[, canDropOnMap = false[, index = INDEX_WHEREEVER[, flags = 0]]])
player:addItemEx(item[, canDropOnMap = true[, slot = CONST_SLOT_WHEREEVER]])
player:removeItem(itemId, count[, subType = -1[, ignoreEquipped = false]])
player:getMoney()
player:addMoney(money)
player:removeMoney(money)
player:showTextDialog(id or name or userdata[, text[, canWrite[, length]]])
player:sendTextMessage(type, text[, position, primaryValue = 0, primaryColor = TEXTCOLOR_NONE[, secondaryValue = 0, secondaryColor = TEXTCOLOR_NONE]])
player:sendTextMessage(type, text, channelId)
player:sendChannelMessage(author, text, type, channelId)
player:sendPrivateMessage(speaker, text[, type])
player:channelSay(speaker, type, text, channelId)
player:openChannel(channelId)
player:getSlotItem(slot)
player:getParty()
player:addOutfit(lookType)
player:addOutfitAddon(lookType, addon)
player:removeOutfit(lookType)
player:removeOutfitAddon(lookType, addon)
player:hasOutfit(lookType[, addon = 0])
player:canWearOutfit(lookType[, addon = 0])
player:sendOutfitWindow()
player:addMount(mountId or mountName)
player:removeMount(mountId or mountName)
player:hasMount(mountId or mountName)
player:getPremiumEndsAt()
player:setPremiumEndsAt(timestamp)
player:hasBlessing(blessing)
player:addBlessing(blessing)
player:removeBlessing(blessing)
player:canLearnSpell(spellName)
player:learnSpell(spellName)
player:forgetSpell(spellName)
player:hasLearnedSpell(spellName)
player:sendTutorial(tutorialId)
player:addMapMark(position, type, description)
player:save()
player:popupFYI(message)
player:isPzLocked()
player:getClient()
player:getHouse()
player:sendHouseWindow(house, listId)
player:setEditHouse(house, listId)
player:setGhostMode(enabled[, showEffect=true])
player:getContainerId(container)
player:getContainerById(id)
player:getContainerIndex(id)
player:getInstantSpells()
player:canCast(spell)
player:hasChaseMode()
player:hasSecureMode()
player:getFightMode()
player:getStoreInbox()
Monster(id or userdata)
monster:isMonster()
monster:getType()
monster:rename(name[, nameDescription])
monster:getSpawnPosition()
monster:isInSpawnRange([position])
monster:isIdle()
monster:setIdle(idle)
monster:isTarget(creature)
monster:isOpponent(creature)
monster:isFriend(creature)
monster:addFriend(creature)
monster:removeFriend(creature)
monster:getFriendList()
monster:getFriendCount()
monster:addTarget(creature[, pushFront = false])
monster:removeTarget(creature)
monster:getTargetList()
monster:getTargetCount()
monster:selectTarget(creature)
monster:searchTarget([searchType = TARGETSEARCH_DEFAULT])
monster:isWalkingToSpawn()
monster:walkToSpawn()
Npc([id or name or userdata])
npc:isNpc()
npc:setMasterPos(pos[, radius])
npc:getSpeechBubble()
npc:setSpeechBubble(speechBubble)
Guild(id)
guild:getId()
guild:getName()
guild:getMembersOnline()
guild:addRank(id, name, level)
guild:getRankById(id)
guild:getRankByLevel(level)
guild:getMotd()
guild:setMotd(motd)
Group(id)
group:getId()
group:getName()
group:getFlags()
group:getAccess()
group:getMaxDepotItems()
group:getMaxVipEntries()
group:hasFlag(flag)
Vocation(id or name)
vocation:getId()
vocation:getClientId()
vocation:getName()
vocation:getDescription()
vocation:getRequiredSkillTries(skillType, skillLevel)
vocation:getRequiredManaSpent(magicLevel)
vocation:getCapacityGain()
vocation:getHealthGain()
vocation:getHealthGainTicks()
vocation:getHealthGainAmount()
vocation:getManaGain()
vocation:getManaGainTicks()
vocation:getManaGainAmount()
vocation:getMaxSoul()
vocation:getSoulGainTicks()
vocation:getAttackSpeed()
vocation:getBaseSpeed()
vocation:getDemotion()
vocation:getPromotion()
vocation:allowsPvp()
Town(id or name)
town:getId()
town:getName()
town:getTemplePosition()
House(id)
house:getId()
house:getName()
house:getTown()
house:getExitPosition()
house:getRent()
house:getOwnerGuid()
house:setOwnerGuid(guid[, updateDatabase = true])
house:startTrade(player, tradePartner)
house:getBeds()
house:getBedCount()
house:getDoors()
house:getDoorCount()
house:getDoorIdByPosition(position)
house:getTiles()
house:getItems()
house:getTileCount()
house:canEditAccessList(listId, player)
house:getAccessList(listId)
house:setAccessList(listId, list)
house:kickPlayer(player, targetPlayer)
house:save()
ItemType(id or name)
itemType:isCorpse()
itemType:isDoor()
itemType:isContainer()
itemType:isFluidContainer()
itemType:isMovable()
itemType:isRune()
itemType:isStackable()
itemType:isReadable()
itemType:isWritable()
itemType:isBlocking()
itemType:isGroundTile()
itemType:isMagicField()
itemType:isUseable()
itemType:isPickupable()
itemType:getType()
itemType:getGroup()
itemType:getId()
itemType:getClientId()
itemType:getName()
itemType:getPluralName()
itemType:getArticle()
itemType:getDescription()
itemType:getSlotPosition()
itemType:getCharges()
itemType:getFluidSource()
itemType:getCapacity()
itemType:getWeight([count = 1])
itemType:getHitChance()
itemType:getShootRange()
itemType:getAttack()
itemType:getAttackSpeed()
itemType:getDefense()
itemType:getExtraDefense()
itemType:getArmor()
itemType:getWeaponType()
itemType:getAmmoType()
itemType:getCorpseType()
itemType:getAbilities()
itemType:hasShowAttributes()
itemType:hasShowCount()
itemType:hasShowCharges()
itemType:hasShowDuration()
itemType:hasAllowDistRead()
itemType:getWieldInfo()
itemType:getDuration()
itemType:getLevelDoor()
itemType:getVocationString()
itemType:getMinReqLevel()
itemType:getMinReqMagicLevel()
itemType:getElementType()
itemType:getElementDamage()
itemType:getTransformEquipId()
itemType:getTransformDeEquipId()
itemType:getDestroyId()
itemType:getDecayId()
itemType:getRequiredLevel()
itemType:hasSubType()
itemType:isStoreItem()
Combat()
combat:setParameter(key, value)
combat:getParameter(key)
combat:setFormula(type, mina, minb, maxa, maxb)
combat:setArea(area)
combat:addCondition(condition)
combat:clearConditions()
combat:setCallback(key, function)
combat:setOrigin(origin)
combat:execute(creature, variant)
Condition(conditionType[, conditionId = CONDITIONID_COMBAT])
condition:delete()
condition:getId()
condition:getSubId()
condition:getType()
condition:getIcons()
condition:getEndTime()
condition:clone()
condition:getTicks()
condition:setTicks(ticks)
condition:setParameter(key, value)
condition:getParameter(key)
condition:setFormula(mina, minb, maxa, maxb)
condition:setOutfit(outfit)
condition:setOutfit(lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet[, lookAddons[, lookMount]])
condition:addDamage(rounds, time, value)
Outfit(looktype)
MonsterType(name)
monsterType:getAttackList()
monsterType:addAttack(monsterspell)
monsterType:getDefenseList()
monsterType:addDefense(monsterspell)
monsterType:getElementList()
monsterType:addElement(type, percent)
monsterType:getVoices()
monsterType:addVoice(sentence, interval, chance, yell)
monsterType:getLoot()
monsterType:addLoot(loot)
monsterType:getCreatureEvents()
monsterType:registerEvent(name)
monsterType:onThink(callback)
monsterType:onAppear(callback)
monsterType:onDisappear(callback)
monsterType:onMove(callback)
monsterType:onSay(callback)
monstertype:eventType(event)
monsterType:getSummonList()
monsterType:addSummon(name, interval, chance[, max = -1])
Loot()
loot:delete()
loot:setId(id or name)
loot:setSubType(type)
loot:setChance(chance)
loot:setMaxCount(max)
loot:setActionId(actionid)
loot:setDescription(desc)
loot:addChildLoot(loot)
MonsterSpell()
monsterSpell:delete()
monsterSpell:setType(type)
monsterSpell:setScriptName(name)
monsterSpell:setChance(chance)
monsterSpell:setInterval(interval)
monsterSpell:setRange(range)
monsterSpell:setCombatValue(min, max)
monsterSpell:setCombatType(combatType_t)
monsterSpell:setAttackValue(attack, skill)
monsterSpell:setNeedTarget(bool)
monsterSpell:setNeedDirection(bool)
monsterSpell:setCombatLength(length)
monsterSpell:setCombatSpread(spread)
monsterSpell:setCombatRadius(radius)
monsterSpell:setConditionType(type)
monsterSpell:setConditionDamage(min, max, start)
monsterSpell:setConditionSpeedChange(minSpeed[, maxSpeed])
monsterSpell:setConditionDuration(duration)
monsterSpell:setConditionDrunkenness(drunkenness)
monsterSpell:setConditionTickInterval(interval)
monsterSpell:setCombatShootEffect(effect)
monsterSpell:setCombatEffect(effect)
Party(userdata)
party:disband()
party:getLeader()
party:setLeader(player)
party:getMembers()
party:getMemberCount()
party:getInvitees()
party:getInviteeCount()
party:addInvite(player)
party:removeInvite(player)
party:addMember(player)
party:removeMember(player)
party:isSharedExperienceActive()
party:isSharedExperienceEnabled()
party:shareExperience(experience)
party:setSharedExperience(active)
Spell(words, name or id)
Spell(type)
spell:onCastSpell(callback)
spell:register()
spell:name(name)
spell:id(id)
spell:group(primaryGroup[, secondaryGroup])
spell:cooldown(cooldown)
spell:groupCooldown(primaryGroupCd[, secondaryGroupCd])
spell:level(lvl)
spell:magicLevel(lvl)
spell:mana(mana)
spell:manaPercent(percent)
spell:soul(soul)
spell:range(range)
spell:isPremium(bool)
spell:isEnabled(bool)
spell:needTarget(bool)
spell:needWeapon(bool)
spell:needLearn(bool)
spell:isSelfTarget(bool)
spell:isBlocking(blockingSolid, blockingCreature)
spell:isAggressive(bool)
spell:isPzLock(bool)
spell:vocation(vocation)
spell:words(words[, separator = ""])
spell:needDirection(bool)
spell:hasParams(bool)
spell:hasPlayerNameParam(bool)
spell:needCasterTargetOrDirection(bool)
spell:blockWalls(bool)
spell:runeLevel(level)
spell:runeMagicLevel(magLevel)
spell:runeId(id)
spell:charges(charges)
spell:allowFarUse(bool)
spell:blockWalls(bool)
spell:checkFloor(bool)
Action()
action:onUse(callback)
action:register()
action:id(ids)
action:aid(aids)
action:uid(uids)
action:allowFarUse(bool)
action:blockWalls(bool)
action:checkFloor(bool)
TalkAction(words)
talkAction:onSay(callback)
talkAction:register()
talkAction:separator(sep)
talkAction:access(needAccess = false)
talkAction:accountType(AccountType_t = ACCOUNT_TYPE_NORMAL)
CreatureEvent(eventName)
creatureevent:type(callback)
creatureevent:register()
MoveEvent()
moveevent:type(callback)
moveevent:register()
moveevent:slot(slot)
moveevent:level(lvl)
moveevent:magicLevel(lvl)
moveevent:premium(bool)
moveevent:vocation(vocName[, showInDescription = false, lastVoc = false])
moveevent:tileItem(bool)
moveevent:id(ids)
moveevent:aid(ids)
moveevent:uid(ids)
moveevent:position(positions)
GlobalEvent(eventName)
globalevent:type(callback)
globalevent:register()
globalevent:time(time)
globalevent:interval(interval)
Weapon(type)
weapon:action(callback)
weapon:register()
weapon:onUseWeapon(callback)
weapon:wieldedUnproperly(bool)
weapon:level(lvl)
weapon:magicLevel(lvl)
weapon:mana(mana)
weapon:manaPercent(percent)
weapon:health(health)
weapon:healthPercent(percent)
weapon:soul(soul)
weapon:breakChance(percent)
weapon:damage(damage[min, max])
weapon:element(combatType)
weapon:premium(bool)
weapon:vocation(vocName[, showInDescription = false, lastVoc = false])
weapon:id(id)
weapon:attack(atk)
weapon:defense(defense[, extraDefense])
weapon:range(range)
weapon:charges(charges[, showCharges = true])
weapon:duration(duration[, showDuration = true])
weapon:decayTo([itemid = 0])
weapon:transformEquipTo(itemid)
weapon:transformDeEquipTo(itemid)
weapon:shootType(type)
weapon:slotType(slot)
weapon:ammoType(type)
weapon:hitChance(chance)
weapon:maxHitChance(max)
weapon:extraElement(atk, combatType)
LuaEnvironment::LuaEnvironment()